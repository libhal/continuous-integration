# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: üß™ tests

on:
  workflow_call:
    inputs:
      library:
        type: string
        required: true
      version:
        type: string
        default: ""
      coverage:
        type: boolean
        required: true
      fail_on_coverage:
        type: boolean
        required: true
      coverage_threshold:
        type: string
        required: true
      repo:
        type: string
        required: true
      conan_version:
        type: string
        required: true

jobs:
  run_tests:
    strategy:
      fail-fast: false
      matrix:
        include:
          - toolchain: gcc
            compiler_version: 12
            os: ubuntu-22.04
            standard_library: libstdc++
            installations: sudo apt install -y clang-tidy-15
            enable_coverage: ${{ inputs.coverage }}
            profile_path: profiles/x86_64/linux/

          - toolchain: apple-clang
            compiler_version: 14
            os: macos-12
            standard_library: libc++
            installations: brew install llvm && sudo ln -s $(brew --prefix llvm)/bin/clang-tidy /usr/local/bin/
            profile_path: profiles/x86_64/mac/

          # - toolchain: gcc
          #   compiler_version: 12
          #   os: windows-2022
          #   standard_library: libstdc++
          #   installations: choco install python mingw make && choco install llvm --version=16.0.6
          #   profile_path: profiles/x86_64/windows/

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        if: ${{ inputs.version != '' }}
        with:
          submodules: true
          repository: ${{ inputs.repo }}
          ref: ${{ inputs.version }}

      - uses: actions/checkout@v3
        if: ${{ inputs.version == '' }}
        with:
          submodules: true
          repository: ${{ inputs.repo }}

      - name: üì• Install OS Specific Tools
        if: ${{ matrix.installations != '' }}
        run: ${{ matrix.installations }}

      - name: üì• Install Conan ${{ inputs.conan_version }}
        run: pip3 install conan==${{ inputs.conan_version }}

      - name: üì° Add `libhal` repo to conan remotes
        run: conan remote add libhal
          https://libhal.jfrog.io/artifactory/api/conan/trunk-conan

      - name: üì° Create and setup default profile
        run: conan profile detect --force

      - name: üëÅÔ∏è‚Äçüó®Ô∏è Show conan profile
        run: conan profile show

      - name: üì° Install default profiles
        run: conan config install -sf ${{ matrix.profile_path }} -tf profiles https://github.com/libhal/conan-config.git

      - name: üî¨ Create & Run Unit Tests
        if: ${{ runner.os != 'Windows' }}
        run: VERBOSE=1 conan create . --build=missing -s compiler.cppstd=20 -s compiler.version=${{ matrix.compiler_version }} -s compiler.libcxx=${{ matrix.standard_library }} -s compiler=${{ matrix.toolchain }} -s build_type=Debug --version="latest"

      - name: üî¨ Create & Run Unit Tests
        if: ${{ runner.os == 'Windows' }}
        run: $env:VERBOSE = 1 ; conan create . --build=missing -s compiler.cppstd=20 -s compiler.version=${{ matrix.compiler_version }} -s compiler.libcxx=${{ matrix.standard_library }} -s compiler=${{ matrix.toolchain }} -s build_type=Debug --version="latest"

      - name: üî¨ Build & Run Unit Tests (for coverage)
        if: ${{ matrix.enable_coverage }}
        run: conan build . --build=missing -s compiler.cppstd=20 -s compiler.version=${{ matrix.compiler_version }} -s compiler.libcxx=${{ matrix.standard_library }} -s compiler=${{ matrix.toolchain }} -s build_type=Debug --version="latest"

      - name: üì• Install gcovr
        if: ${{ matrix.enable_coverage }}
        run: pip3 install gcovr

      - name: üîé Generate Code Coverage
        if: ${{ matrix.enable_coverage }}
        working-directory: build
        run: |
          mkdir coverage/ && python3 -m gcovr --root ../../ --exclude ".*/third_party/.*" --cobertura coverage/coverage.xml --html coverage/index.html --html-details --sort-percentage

      - name: Coverage Summary
        if: ${{ matrix.enable_coverage }}
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: build/coverage/coverage.xml
          badge: true
          fail_below_min: ${{ inputs.fail_on_coverage }}
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: ${{ inputs.coverage_threshold }}

      - name: Extract & Save Coverage SVG
        if: ${{ matrix.enable_coverage }}
        run: wget
          $(cat code-coverage-results.md |
          grep -Eo 'https://img.shields.io/badge/[^)]*')
          -O build/coverage/coverage.svg

      - uses: actions/upload-artifact@v4
        if: github.ref == 'refs/heads/main' && github.repository == inputs.repo
        with:
          name: coverage
          retention-days: 1
          path: build/coverage/
